@page "/"
@page "/clients"
@using ClientApp.Services
@using ClientApp.Pages.Components
@inject BackEndHttpClient _httpclient

<h3>Clients</h3>

@if (isLoading)
{
    <LoaderComponent />
}
else
{
    <span>Click on any row below for more info.</span>
    <table class="table table-hover border-top">
        <thead>
            <tr>
                <th>FullName</th>
                <th>Surname</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr @onclick="() => OnRowClick(client)">
                    <td>@client.Fullname</td>
                    <td>@client.Surname</td>
                    <td>@client.ClientBalance</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal && selectedClient != null)
{
    <TransactionModal Clients="clients" SelectedClient="selectedClient" Transactions="transactions" 
                      OnClientChange="LoadClientTransactions" OnClose="CloseModal" OnSave="SaveTransactions" />
}

@if (showAddClientModal)
{
    <AddClientModal ShowModal="showAddClientModal" OnClose="CloseAddClientModal" OnClientAdded="AddNewClient" />
}

<button class="btn btn-primary" @onclick="ShowAddClientModal">Add New Client</button>

@code {
    private List<ClientModel> clients { get; set; } = new List<ClientModel>();
    private ClientModel selectedClient;
    private bool showAddClientModal = false;
    private List<TransactionModel> transactions;
    private bool showModal = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadClientsAsync();
    }

    private async Task LoadClientsAsync()
    {

        await Task.Delay(2000);

        var result = await _httpclient.GetDataAsync<List<ClientModel>>("api/Client/GetClients");

        if (result.Succeeded)
        {
            clients = result.Data;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task OnRowClick(ClientModel client)
    {
        selectedClient = client;
        await LoadClientTransactions(client.ClientID);
        showModal = true;
    }

    private async Task LoadClientTransactions(int clientId)
    {
        var transactionResult = await _httpclient.GetDataAsync<List<TransactionModel>>($"api/Transaction/client/{clientId}");

        if (transactionResult.Succeeded)
        {
            transactions = transactionResult.Data;
        }
        else
        {
            transactions = new List<TransactionModel>();
        }

        StateHasChanged();
    }

    private async Task SaveTransactions(List<TransactionModel> updatedTransactions)
    {
        var result = await _httpclient.PostDataAsync("api/Transaction/transactionId", updatedTransactions);

        if (result.Succeeded)
        {
            transactions = updatedTransactions;
        }
    }

    private void CloseModal()
    {
        showModal = false;
        selectedClient = null;
        transactions = null;
    }

    private void ShowAddClientModal()
    {
        showAddClientModal = true;
    }

    private void CloseAddClientModal()
    {
        showAddClientModal = false;
    }

    private async Task AddNewClient(ClientModel newClient)
    {
        var result = await _httpclient.PostDataAsync("api/Client/AddClient", newClient);

        if (result.Succeeded)
        {
            clients.Add(newClient);
        }
        else
        {
            //
        }

        CloseAddClientModal();
    }
}